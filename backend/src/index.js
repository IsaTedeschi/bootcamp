//express controla rotas
const { response } = require('express');
const express = require('express'); 
const cors = require('cors');
const { uuid, isUuid } = require('uuidv4')

//com isso a aplicaÃ§Ã£o estÃ¡ criada
const app = express();

//permite qualquer tipo de acesso ao backend
app.use(cors());
//use Ã© quando vai usar algum tipo de funÃ§Ã£o que todas as rotas vÃ£o ter que passar por elas
app.use(express.json());

/*
toda vez que usa get Ã© uma rota, precisa sempre usar esse "response", pq Ã© ele que dÃ¡ a resposta pro front end
pode retornar um arquivo pra download, um texto, um json, um arquivo em tela...

send = retorna um texto
- return response.send('Hello World');

estrutura json (response.json) = retorna um array ou um objeto

response = contÃ©m as informaÃ§Ãµes disponiveis para conseguir retornar respostas para o usuÃ¡rio
request = quem guarda as informaÃ§Ãµes da requisiÃ§Ã£o que o usuario quer fazer (qual rota ele tÃ¡ acessando, os paramentros que ele ta enviando para essa rota, um cadastro com email, senha, nome...)
*/

/*
    MÃ©todos HTTP: (o que tÃ¡ dentro do app.)
GET: buscar informaÃ§Ãµes do back end (toda vez que ta criando uma rota que tem o intuito de retornar algumas informaÃ§Ãµes pro usuÃ¡rio) - nÃ£o Ã© toda rota que retorna alguma coisa, quando quer deletar, algo do back end nao obrigatoriamente retorna alguma coisa, entao nÃ£o se usa GET

POST: criar uma informaÃ§Ã£o no back end

PUT/PATCH: alterar uma informaÃ§Ã£o no backend
(PUT Ã© usado quando quer atualizar um recurso por completo - PATCH Ã© quando quer atualizar alguma coisa especÃ­fica)

DELETE: quando quer apagar alguma informaÃ§Ã£o
*/

/*
    Tipos de parÃ¢metro:
(parÃ¢metros: formas do front end (do insomnia ou do cliente) que tÃ¡ requisitando as rotas de aplicaÃ§Ã£o conseguir algum tipo de informaÃ§Ã£o)

Query Params: Filtros e paginaÃ§Ã£o (quando vai fazer uma listagem) --> usados principalmente com parametros GET
Route Params: Identificar recursos (na hora de Atualizar ou Deletar) --> sÃ£o os :id, pq precisa dizer qual Ã© o recurso que quer deletar/atualizar
Request Body: Utilizado basicamente para o resto --> conteudo na hora de criar ou editar um recurso (na hora de pegar as informaÃ§Ãµes que foram colocadas por um usuÃ¡rio) (as informaÃ§Ãµes chegam na gente por .json)
*/

/*
    Middleware:

Insterceptador de requisiÃ§Ãµes
    pode interromper totalmente as requisiÃ§Ãµes
    alterar dados da requisiÃ§Ã£o

Age enquanto as requisiÃ§Ãµes estÃ£o chegando e ele pode mudar dados da requisiÃ§Ã£o antes que os dados cheguem ao cliente 

Usa ele quando quer que um trecho de cÃ³digo seja disparado de forma automÃ¡tica em uma ou mais rotas da aplicaÃ§Ã£o

Middleware pode servir para validaÃ§Ã£o tambÃ©m, ver se o dado que o cliente tÃ¡ mandando tÃ¡ correto
*/

//variavel chamada projects que Ã© um array vazio
//armazena na memoria da aplicaÃ§Ã£o, entao enquanto ela estiver sendo executada as informaÃ§Ãµes contidas nessa variavel estarao disponiveis para todo projeto, se a aplicaÃ§Ã£o fechar/reiniciar ela volta a ser um array vazio 
const projects = [];

//por ter request,response quer dizer que Ã© middleware, e assim todas as funÃ§Ãµes tambÃ©m sÃ£o (como get, put...)
//isso pq elas interceptam a requisiÃ§Ã£o, elas pegam dados delas e podem retornar um resultado a ela
//logRequest vai ser disparado de forma automÃ¡tica em todas as requisiÃ§Ãµes e mostrar qual rota tÃ¡ sendo utilizada
function logRequest(request, response, next){
    const {method, url} = request;

    const logLabel = `[${method.toUpperCase()}] ${url}`;

    console.time(logLabel);

    next();

    console.timeEnd(logLabel);
}

//vai ser usada para validar se esse id que ta sendo mandado pro projeto tanto na rota de atualizaÃ§Ã£o quanto na rota de deleÃ§Ã£o Ã© um id vÃ¡lido
//para saber se ele Ã© vÃ¡lido, na biblioteca uuiv4, tem o isUuid, que retorna se tem um id vÃ¡lido ou nÃ£o
function validateProjectId(request, response, next){
    const { id } = request.params; 

    //toda vez que nÃ£o Ã© um middleware return next mas sim um response, Ã© um que interrompe totalmente a requisiÃ§Ã£o, caso ele nÃ£o valide esse id
    //esse return response retorna um resultado para o usuÃ¡rio, entÃ£o tudo a partir daÃ­, nÃ£o Ã© executado
    if(!isUuid(id)){
        return response.status(400).json({ error: 'Invalid Project ID'});
    }

    return next();
}

/*se quiser que mostre o que estÃ¡ acontecendo de sÃ³ um tipo de requisiÃ§Ã£o, como o get, por exemplo, tira a linha de baixo (app...) e coloca "app.get('/projects', logRequest, (request, response)..."
Assim sÃ³ aparece quando faz uma nova atualizaÃ§Ã£o no get */
app.use(logRequest);
app.use('/projects/:id', validateProjectId);

/*isso que vem depois da barra Ã© o recurso que o usuario quer acessar
get mostra alguma informaÃ§Ã£o, listar algo*/
app.get('/projects', (request, response) => {
    const { title } = request.query;
    //pode ser no lugar de {} sÃ³ query

    const results = title
        ? projects.filter(project => project.title.includes(title))
        : projects;
    
    return response.json(results);
})

//para criar um projeto
//nagevador nao testa essa rota (sÃ³ testa get)
app.post('/projects', (request, response) => {
    const {title,owner} = request.body;
    //pode ser no lugar de {} sÃ³ body --> desestrulaÃ§Ã£o 
    
    const project = { id: uuid(), title, owner }; 

    projects.push(project);
    
    return response.json(project);
})

/*quer atualizar um projeto (nÃ£o todos) - identifica qual a partir de um ID
http://localhost:3333/projects/2 => tem ID 2
*/
app.put('/projects/:id', (request, response) => {
    const { id } = request.params;
    //pode ser no lugar de {} sÃ³ params --> desestruturaÃ§Ã£o 
    const {title,owner} = request.body;
    
    const projectIndex = projects.findIndex(project => project.id == id);

    if(projectIndex < 0) {
        return response.status(400).json({error: 'Project Not Found'})
    }

    const project = {
        id,
        title,
        owner, 
    };

    projects[projectIndex] = project;
    
    return response.json(project)
})

//para deletar tambÃ©m Ã© algum projeto especifico nÃ£o tudo
app.delete('/projects/:id', (request, response) => {
    const {id} = request.params;

    const projectIndex = projects.findIndex(project => project.id == id);

    if(projectIndex < 0) {
        return response.status(400).json({error: 'Project Not Found'})
    }

    projects.splice(projectIndex, 1);

    return response.status(204).send()
})

//Toda vez que o servidor inicializa aparece isso
app.listen(3333, () => {
    console.log('ðŸš€ Back end started"');
});

